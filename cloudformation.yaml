AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Event-Driven Order Notification System

Resources:

  # DynamoDB Table
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # SNS Topic
  OrderTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: OrderTopic

  # Dead Letter Queue (DLQ)
  OrderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderDLQ

  # SQS Queue
  OrderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: OrderQueue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt OrderDLQ.Arn
        maxReceiveCount: 3

  # SQS Queue Policy to allow SNS to send messages to SQS
  OrderQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref OrderQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "SQS:SendMessage"
            Resource: !GetAtt OrderQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref OrderTopic

  # SNS Subscription to SQS
  OrderTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref OrderTopic
      Protocol: sqs
      Endpoint: !GetAtt OrderQueue.Arn
      RawMessageDelivery: true

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt OrdersTable.Arn
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt OrderQueue.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Lambda Function
  OrderProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: OrderProcessor
      Handler: index.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref OrdersTable
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['TABLE_NAME'])

          def lambda_handler(event, context):
              for record in event['Records']:
                  try:
                      body = json.loads(record['body'])
                      print(f"Received outer body: {body}")

                      if 'Message' in body:
                          payload = json.loads(body['Message'])
                      else:
                          payload = body

                      print(f"Processed payload: {payload}")

                      table.put_item(Item=payload)

                  except Exception as e:
                      print(f"Error processing record: {str(e)}")
                      raise e

              return {'statusCode': 200, 'body': 'Order processed successfully'}

  # Event Source Mapping to trigger Lambda from SQS
  LambdaSQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 5
      EventSourceArn: !GetAtt OrderQueue.Arn
      FunctionName: !GetAtt OrderProcessorFunction.Arn
      Enabled: true

Outputs:
  OrdersTableName:
    Description: "DynamoDB Orders table name"
    Value: !Ref OrdersTable

  OrderTopicArn:
    Description: "SNS Topic ARN"
    Value: !Ref OrderTopic

  OrderQueueUrl:
    Description: "SQS Queue URL"
    Value: !Ref OrderQueue

  LambdaFunctionName:
    Description: "Lambda Function Name"
    Value: !Ref OrderProcessorFunction
